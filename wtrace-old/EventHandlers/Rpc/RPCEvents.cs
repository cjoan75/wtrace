using System;
using System.Diagnostics;
using System.Diagnostics.Tracing;
using System.Text;
using Microsoft.Diagnostics.Tracing;
using Address = System.UInt64;

#pragma warning disable 1591        // disable warnings on XML comments not being present

// This code was automatically generated by the TraceParserGen tool, which converts
// an ETW event manifest into strongly typed C# classes.
namespace Microsoft.Diagnostics.Tracing.Parsers
{
    using Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsRPC;

    [System.CodeDom.Compiler.GeneratedCode("traceparsergen", "2.0")]
    sealed class MicrosoftWindowsRPCTraceEventParser : TraceEventParser 
    {
        public static string ProviderName = "Microsoft-Windows-RPC";
        public static Guid ProviderGuid = new Guid(unchecked((int) 0x6ad52b32), unchecked((short) 0xd609), unchecked((short) 0x4be9), 0xae, 0x07, 0xce, 0x8d, 0xae, 0x93, 0x7e, 0x39);
        public enum Keywords : long
        {
        };

        public MicrosoftWindowsRPCTraceEventParser(TraceEventSource source) : base(source) {}

        public event Action<Args> Args
        {
            add
            {
                source.RegisterEventTemplate(Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 9, ProviderGuid);
            }
        }
        public event Action<Args3> Args3
        {
            add
            {
                source.RegisterEventTemplate(Template3(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 3, ProviderGuid);
            }
        }
        public event Action<DebugArgs> Debug
        {
            add
            {
                source.RegisterEventTemplate(DebugTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 11, ProviderGuid);
            }
        }
        public event Action<Debug10Args> Debug10
        {
            add
            {
                source.RegisterEventTemplate(Debug10Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 10, ProviderGuid);
            }
        }
        public event Action<Debug4Args> Debug4
        {
            add
            {
                source.RegisterEventTemplate(Debug4Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 4, ProviderGuid);
            }
        }
        public event Action<DebugStartArgs> DebugStart
        {
            add
            {
                source.RegisterEventTemplate(DebugStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 12, ProviderGuid);
            }
        }
        public event Action<DebugStopArgs> DebugStop
        {
            add
            {
                source.RegisterEventTemplate(DebugStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 13, ProviderGuid);
            }
        }
        public event Action<RpcClientCallStartArgs> RpcClientCallStart
        {
            add
            {
                source.RegisterEventTemplate(RpcClientCallStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 5, ProviderGuid);
            }
        }
        public event Action<RpcClientCallStopArgs> RpcClientCallStop
        {
            add
            {
                source.RegisterEventTemplate(RpcClientCallStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 7, ProviderGuid);
            }
        }
        public event Action<RpcClientCallStop1Args> RpcClientCallStop1
        {
            add
            {
                source.RegisterEventTemplate(RpcClientCallStop1Template(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 1, ProviderGuid);
            }
        }
        public event Action<RpcServerCallArgs> RpcServerCall
        {
            add
            {
                source.RegisterEventTemplate(RpcServerCallTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 2, ProviderGuid);
            }
        }
        public event Action<RpcServerCallStartArgs> RpcServerCallStart
        {
            add
            {
                source.RegisterEventTemplate(RpcServerCallStartTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 6, ProviderGuid);
            }
        }
        public event Action<RpcServerCallStopArgs> RpcServerCallStop
        {
            add
            {
                source.RegisterEventTemplate(RpcServerCallStopTemplate(value));
            }
            remove
            {
                source.UnregisterEventTemplate(value, 8, ProviderGuid);
            }
        }

        #region private
        protected override string GetProviderName() { return ProviderName; }

        static private Args Template(Action<Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Args(action, 9, 0, "", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Args3 Template3(Action<Args3> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Args3(action, 3, 0, "", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DebugArgs DebugTemplate(Action<DebugArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DebugArgs(action, 11, 3, "Debug", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Debug10Args Debug10Template(Action<Debug10Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Debug10Args(action, 10, 3, "Debug", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private Debug4Args Debug4Template(Action<Debug4Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new Debug4Args(action, 4, 3, "Debug", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private DebugStartArgs DebugStartTemplate(Action<DebugStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DebugStartArgs(action, 12, 3, "Debug", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private DebugStopArgs DebugStopTemplate(Action<DebugStopArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new DebugStopArgs(action, 13, 3, "Debug", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private RpcClientCallStartArgs RpcClientCallStartTemplate(Action<RpcClientCallStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new RpcClientCallStartArgs(action, 5, 1, "RpcClientCall", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private RpcClientCallStopArgs RpcClientCallStopTemplate(Action<RpcClientCallStopArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new RpcClientCallStopArgs(action, 7, 1, "RpcClientCall", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private RpcClientCallStop1Args RpcClientCallStop1Template(Action<RpcClientCallStop1Args> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new RpcClientCallStop1Args(action, 1, 1, "RpcClientCall", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }
        static private RpcServerCallArgs RpcServerCallTemplate(Action<RpcServerCallArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new RpcServerCallArgs(action, 2, 2, "RpcServerCall", Guid.Empty, 0, "", ProviderGuid, ProviderName );
        }
        static private RpcServerCallStartArgs RpcServerCallStartTemplate(Action<RpcServerCallStartArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new RpcServerCallStartArgs(action, 6, 2, "RpcServerCall", Guid.Empty, 1, "Start", ProviderGuid, ProviderName );
        }
        static private RpcServerCallStopArgs RpcServerCallStopTemplate(Action<RpcServerCallStopArgs> action)
        {                  // action, eventid, taskid, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName
            return new RpcServerCallStopArgs(action, 8, 2, "RpcServerCall", Guid.Empty, 2, "Stop", ProviderGuid, ProviderName );
        }

        static private volatile TraceEvent[] s_templates;
        protected override void EnumerateTemplates(Func<string, string, EventFilterResponse> eventsToObserve, Action<TraceEvent> callback)
        {
            if (s_templates == null)
            {
                var templates = new TraceEvent[13];
                templates[0] = DebugStopTemplate(null);
                templates[1] = DebugStartTemplate(null);
                templates[2] = DebugTemplate(null);
                templates[3] = DebugTemplate(null);
                templates[4] = Template(null);
                templates[5] = RpcServerCallStopTemplate(null);
                templates[6] = RpcClientCallStopTemplate(null);
                templates[7] = RpcServerCallStartTemplate(null);
                templates[8] = RpcClientCallStartTemplate(null);
                templates[9] = DebugTemplate(null);
                templates[10] = Template(null);
                templates[11] = RpcServerCallTemplate(null);
                templates[12] = RpcClientCallStopTemplate(null);
                s_templates = templates;
            }
            foreach (var template in s_templates)
                if (eventsToObserve == null || eventsToObserve(template.ProviderName, template.EventName) == EventFilterResponse.AcceptEvent)
                    callback(template);
        }

        #endregion
    }
}

namespace Microsoft.Diagnostics.Tracing.Parsers.MicrosoftWindowsRPC
{
    sealed class Args : TraceEvent
    {
        public int Status { get { return GetInt32At(0); } }

        #region Private
        internal Args(Action<Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 4));
            Debug.Assert(!(Version > 1 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Args> m_target;
        #endregion
    }
    sealed class Args3 : TraceEvent
    {
        public string ImageName { get { return GetUnicodeStringAt(0); } }
        public int DetectionLocation { get { return GetInt16At(SkipUnicodeString(0)); } }
        public int Status { get { return GetInt32At(SkipUnicodeString(0)+2); } }
        public int AdditionalData1 { get { return GetInt32At(SkipUnicodeString(0)+6); } }
        public int AdditionalData2 { get { return GetInt32At(SkipUnicodeString(0)+10); } }

        #region Private
        internal Args3(Action<Args3> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(0)+14));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(0)+14));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Args3>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ImageName", ImageName);
             XmlAttrib(sb, "DetectionLocation", DetectionLocation);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "AdditionalData1", AdditionalData1);
             XmlAttrib(sb, "AdditionalData2", AdditionalData2);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ImageName", "DetectionLocation", "Status", "AdditionalData1", "AdditionalData2"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ImageName;
                case 1:
                    return DetectionLocation;
                case 2:
                    return Status;
                case 3:
                    return AdditionalData1;
                case 4:
                    return AdditionalData2;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Args3> m_target;
        #endregion
    }
    sealed class DebugArgs : TraceEvent
    {
        public long SubjectPointer { get { return GetInt64At(0); } }
        public int FragmentSize { get { return GetInt32At(8); } }
        public byte[] Fragment { get { return GetByteArrayAt(12, FragmentSize); } }

        #region Private
        internal DebugArgs(Action<DebugArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 0+ (FragmentSize*1)+12));
            Debug.Assert(!(Version > 1 && EventDataLength < 0+ (FragmentSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DebugArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SubjectPointer", SubjectPointer);
             XmlAttrib(sb, "FragmentSize", FragmentSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SubjectPointer", "FragmentSize", "Fragment"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SubjectPointer;
                case 1:
                    return FragmentSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DebugArgs> m_target;
        #endregion
    }
    sealed class Debug10Args : TraceEvent
    {
        public long SubjectPointer { get { return GetInt64At(0); } }
        public int FragmentSize { get { return GetInt32At(8); } }
        public byte[] Fragment { get { return GetByteArrayAt(12, FragmentSize); } }

        #region Private
        internal Debug10Args(Action<Debug10Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 0+ (FragmentSize*1)+12));
            Debug.Assert(!(Version > 1 && EventDataLength < 0+ (FragmentSize*1)+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Debug10Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "SubjectPointer", SubjectPointer);
             XmlAttrib(sb, "FragmentSize", FragmentSize);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "SubjectPointer", "FragmentSize", "Fragment"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return SubjectPointer;
                case 1:
                    return FragmentSize;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Debug10Args> m_target;
        #endregion
    }
    sealed class Debug4Args : TraceEvent
    {
        public SubjectTypes Subject { get { return (SubjectTypes)GetByteAt(0); } }
        public EventTypes Verb { get { return (EventTypes)GetByteAt(1); } }
        public long SubjectPointer { get { return GetInt64At(2); } }
        public long ObjectPointer { get { return GetInt64At(10); } }
        public long DataPointer { get { return GetInt64At(18); } }

        #region Private
        internal Debug4Args(Action<Debug4Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 26));
            Debug.Assert(!(Version > 1 && EventDataLength < 26));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<Debug4Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Subject", Subject);
             XmlAttrib(sb, "Verb", Verb);
             XmlAttrib(sb, "SubjectPointer", SubjectPointer);
             XmlAttrib(sb, "ObjectPointer", ObjectPointer);
             XmlAttrib(sb, "DataPointer", DataPointer);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Subject", "Verb", "SubjectPointer", "ObjectPointer", "DataPointer"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Subject;
                case 1:
                    return Verb;
                case 2:
                    return SubjectPointer;
                case 3:
                    return ObjectPointer;
                case 4:
                    return DataPointer;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<Debug4Args> m_target;
        #endregion
    }
    sealed class DebugStartArgs : TraceEvent
    {
        public RpcHttp2ObjectTypes ObjectType { get { return (RpcHttp2ObjectTypes)GetInt32At(0); } }
        public RpcHttp2Operations Operation { get { return (RpcHttp2Operations)GetInt32At(4); } }
        public long Address { get { return GetInt64At(8); } }
        public long Data { get { return GetInt64At(16); } }

        #region Private
        internal DebugStartArgs(Action<DebugStartArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DebugStartArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ObjectType", ObjectType);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "Address", Address);
             XmlAttrib(sb, "Data", Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ObjectType", "Operation", "Address", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ObjectType;
                case 1:
                    return Operation;
                case 2:
                    return Address;
                case 3:
                    return Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DebugStartArgs> m_target;
        #endregion
    }
    sealed class DebugStopArgs : TraceEvent
    {
        public RpcHttp2ObjectTypes ObjectType { get { return (RpcHttp2ObjectTypes)GetInt32At(0); } }
        public RpcHttp2Operations Operation { get { return (RpcHttp2Operations)GetInt32At(4); } }
        public long Address { get { return GetInt64At(8); } }
        public long Data { get { return GetInt64At(16); } }

        #region Private
        internal DebugStopArgs(Action<DebugStopArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 24));
            Debug.Assert(!(Version > 1 && EventDataLength < 24));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<DebugStopArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ObjectType", ObjectType);
             XmlAttrib(sb, "Operation", Operation);
             XmlAttrib(sb, "Address", Address);
             XmlAttrib(sb, "Data", Data);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ObjectType", "Operation", "Address", "Data"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ObjectType;
                case 1:
                    return Operation;
                case 2:
                    return Address;
                case 3:
                    return Data;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<DebugStopArgs> m_target;
        #endregion
    }
    sealed class RpcClientCallStartArgs : TraceEvent
    {
        public Guid InterfaceUuid { get { return GetGuidAt(0); } }
        public int ProcNum { get { return GetInt32At(16); } }
        public ProtocolSequences Protocol { get { return (ProtocolSequences)GetInt32At(20); } }
        public string NetworkAddress { get { return GetUnicodeStringAt(24); } }
        public string Endpoint { get { return GetUnicodeStringAt(SkipUnicodeString(24)); } }
        public string Options { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(24))); } }
        public AuthenticationLevels AuthenticationLevel { get { return (AuthenticationLevels)GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24)))); } }
        public AuthenticationServices AuthenticationService { get { return (AuthenticationServices)GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24)))+4); } }
        public ImpersonationLevels ImpersonationLevel { get { return (ImpersonationLevels)GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24)))+8); } }

        #region Private
        internal RpcClientCallStartArgs(Action<RpcClientCallStartArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24)))+12));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24)))+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<RpcClientCallStartArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "InterfaceUuid", InterfaceUuid);
             XmlAttrib(sb, "ProcNum", ProcNum);
             XmlAttrib(sb, "Protocol", Protocol);
             XmlAttrib(sb, "NetworkAddress", NetworkAddress);
             XmlAttrib(sb, "Endpoint", Endpoint);
             XmlAttrib(sb, "Options", Options);
             XmlAttrib(sb, "AuthenticationLevel", AuthenticationLevel);
             XmlAttrib(sb, "AuthenticationService", AuthenticationService);
             XmlAttrib(sb, "ImpersonationLevel", ImpersonationLevel);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "InterfaceUuid", "ProcNum", "Protocol", "NetworkAddress", "Endpoint", "Options", "AuthenticationLevel", "AuthenticationService", "ImpersonationLevel"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return InterfaceUuid;
                case 1:
                    return ProcNum;
                case 2:
                    return Protocol;
                case 3:
                    return NetworkAddress;
                case 4:
                    return Endpoint;
                case 5:
                    return Options;
                case 6:
                    return AuthenticationLevel;
                case 7:
                    return AuthenticationService;
                case 8:
                    return ImpersonationLevel;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<RpcClientCallStartArgs> m_target;
        #endregion
    }
    sealed class RpcClientCallStopArgs : TraceEvent
    {
        public int Status { get { return GetInt32At(0); } }

        #region Private
        internal RpcClientCallStopArgs(Action<RpcClientCallStopArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 4));
            Debug.Assert(!(Version > 1 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<RpcClientCallStopArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<RpcClientCallStopArgs> m_target;
        #endregion
    }
    sealed class RpcClientCallStop1Args : TraceEvent
    {
        public string ImageName { get { return GetUnicodeStringAt(0); } }
        public string ComputerName { get { return GetUnicodeStringAt(SkipUnicodeString(0)); } }
#pragma warning disable CS0114 // Member hides inherited member; missing override keyword
        public int ProcessID { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))); } }
#pragma warning restore CS0114 // Member hides inherited member; missing override keyword
        public DateTime TimeStamp2 { get { return DateTime.FromFileTime(GetInt64At(SkipUnicodeString(SkipUnicodeString(0))+4)); } }
        public int GeneratingComponent { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+12); } }
        public int Status { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+16); } }
        public int DetectionLocation { get { return GetInt16At(SkipUnicodeString(SkipUnicodeString(0))+20); } }
        public int Flags { get { return GetInt16At(SkipUnicodeString(SkipUnicodeString(0))+22); } }
        public int NumberOfParameters { get { return GetInt16At(SkipUnicodeString(SkipUnicodeString(0))+24); } }
        public int ParameterType { get { return GetInt32At(SkipUnicodeString(SkipUnicodeString(0))+26); } }
        public string AnsiValue { get { return GetUTF8StringAt(SkipUnicodeString(SkipUnicodeString(0))+30); } }
        public string UnicodeValue { get { return GetUnicodeStringAt(SkipUTF8String(SkipUnicodeString(SkipUnicodeString(0))+30)); } }
        public int LValue { get { return GetInt32At(SkipUnicodeString(SkipUTF8String(SkipUnicodeString(SkipUnicodeString(0))+30))); } }
        public long PValue { get { return GetInt64At(SkipUnicodeString(SkipUTF8String(SkipUnicodeString(SkipUnicodeString(0))+30))+4); } }

        #region Private
        internal RpcClientCallStop1Args(Action<RpcClientCallStop1Args> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUTF8String(SkipUnicodeString(SkipUnicodeString(0))+30))+12));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUTF8String(SkipUnicodeString(SkipUnicodeString(0))+30))+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<RpcClientCallStop1Args>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ImageName", ImageName);
             XmlAttrib(sb, "ComputerName", ComputerName);
             XmlAttrib(sb, "ProcessID", ProcessID);
             XmlAttrib(sb, "TimeStamp", TimeStamp);
             XmlAttrib(sb, "GeneratingComponent", GeneratingComponent);
             XmlAttrib(sb, "Status", Status);
             XmlAttrib(sb, "DetectionLocation", DetectionLocation);
             XmlAttrib(sb, "Flags", Flags);
             XmlAttrib(sb, "NumberOfParameters", NumberOfParameters);
             XmlAttrib(sb, "ParameterType", ParameterType);
             XmlAttrib(sb, "AnsiValue", AnsiValue);
             XmlAttrib(sb, "UnicodeValue", UnicodeValue);
             XmlAttrib(sb, "LValue", LValue);
             XmlAttrib(sb, "PValue", PValue);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ImageName", "ComputerName", "ProcessID", "TimeStamp", "GeneratingComponent", "Status", "DetectionLocation", "Flags", "NumberOfParameters", "ParameterType", "AnsiValue", "UnicodeValue", "LValue", "PValue"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ImageName;
                case 1:
                    return ComputerName;
                case 2:
                    return ProcessID;
                case 3:
                    return TimeStamp;
                case 4:
                    return GeneratingComponent;
                case 5:
                    return Status;
                case 6:
                    return DetectionLocation;
                case 7:
                    return Flags;
                case 8:
                    return NumberOfParameters;
                case 9:
                    return ParameterType;
                case 10:
                    return AnsiValue;
                case 11:
                    return UnicodeValue;
                case 12:
                    return LValue;
                case 13:
                    return PValue;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<RpcClientCallStop1Args> m_target;
        #endregion
    }
    sealed class RpcServerCallArgs : TraceEvent
    {
        public string ImangeName { get { return GetUnicodeStringAt(0); } }
        public Guid InterfaceUuid { get { return GetGuidAt(SkipUnicodeString(0)); } }
        public Guid FilterKey { get { return GetGuidAt(SkipUnicodeString(0)+16); } }

        #region Private
        internal RpcServerCallArgs(Action<RpcServerCallArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(0)+32));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(0)+32));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<RpcServerCallArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "ImangeName", ImangeName);
             XmlAttrib(sb, "InterfaceUuid", InterfaceUuid);
             XmlAttrib(sb, "FilterKey", FilterKey);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "ImangeName", "InterfaceUuid", "FilterKey"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return ImangeName;
                case 1:
                    return InterfaceUuid;
                case 2:
                    return FilterKey;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<RpcServerCallArgs> m_target;
        #endregion
    }
    sealed class RpcServerCallStartArgs : TraceEvent
    {
        public Guid InterfaceUuid { get { return GetGuidAt(0); } }
        public int ProcNum { get { return GetInt32At(16); } }
        public ProtocolSequences Protocol { get { return (ProtocolSequences)GetInt32At(20); } }
        public string NetworkAddress { get { return GetUnicodeStringAt(24); } }
        public string Endpoint { get { return GetUnicodeStringAt(SkipUnicodeString(24)); } }
        public string Options { get { return GetUnicodeStringAt(SkipUnicodeString(SkipUnicodeString(24))); } }
        public AuthenticationLevels AuthenticationLevel { get { return (AuthenticationLevels)GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24)))); } }
        public AuthenticationServices AuthenticationService { get { return (AuthenticationServices)GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24)))+4); } }
        public ImpersonationLevels ImpersonationLevel { get { return (ImpersonationLevels)GetInt32At(SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24)))+8); } }

        #region Private
        internal RpcServerCallStartArgs(Action<RpcServerCallStartArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24)))+12));
            Debug.Assert(!(Version > 1 && EventDataLength < SkipUnicodeString(SkipUnicodeString(SkipUnicodeString(24)))+12));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<RpcServerCallStartArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "InterfaceUuid", InterfaceUuid);
             XmlAttrib(sb, "ProcNum", ProcNum);
             XmlAttrib(sb, "Protocol", Protocol);
             XmlAttrib(sb, "NetworkAddress", NetworkAddress);
             XmlAttrib(sb, "Endpoint", Endpoint);
             XmlAttrib(sb, "Options", Options);
             XmlAttrib(sb, "AuthenticationLevel", AuthenticationLevel);
             XmlAttrib(sb, "AuthenticationService", AuthenticationService);
             XmlAttrib(sb, "ImpersonationLevel", ImpersonationLevel);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "InterfaceUuid", "ProcNum", "Protocol", "NetworkAddress", "Endpoint", "Options", "AuthenticationLevel", "AuthenticationService", "ImpersonationLevel"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return InterfaceUuid;
                case 1:
                    return ProcNum;
                case 2:
                    return Protocol;
                case 3:
                    return NetworkAddress;
                case 4:
                    return Endpoint;
                case 5:
                    return Options;
                case 6:
                    return AuthenticationLevel;
                case 7:
                    return AuthenticationService;
                case 8:
                    return ImpersonationLevel;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<RpcServerCallStartArgs> m_target;
        #endregion
    }
    sealed class RpcServerCallStopArgs : TraceEvent
    {
        public int Status { get { return GetInt32At(0); } }

        #region Private
        internal RpcServerCallStopArgs(Action<RpcServerCallStopArgs> target, int eventID, int task, string taskName, Guid taskGuid, int opcode, string opcodeName, Guid providerGuid, string providerName)
            : base(eventID, task, taskName, taskGuid, opcode, opcodeName, providerGuid, providerName)
        {
            this.m_target = target;
        }
        protected override void Dispatch()
        {
            m_target(this);
        }
        protected override void Validate()
        {
            Debug.Assert(!(Version == 1 && EventDataLength != 4));
            Debug.Assert(!(Version > 1 && EventDataLength < 4));
        }
        protected override Delegate Target
        {
            get { return m_target; }
            set { m_target = (Action<RpcServerCallStopArgs>) value; }
        }
        public override StringBuilder ToXml(StringBuilder sb)
        {
             Prefix(sb);
             XmlAttrib(sb, "Status", Status);
             sb.Append("/>");
             return sb;
        }

        public override string[] PayloadNames
        {
            get
            {
                if (payloadNames == null)
                    payloadNames = new string[] { "Status"};
                return payloadNames;
            }
        }

        public override object PayloadValue(int index)
        {
            switch (index)
            {
                case 0:
                    return Status;
                default:
                    Debug.Assert(false, "Bad field index");
                    return null;
            }
        }

        private event Action<RpcServerCallStopArgs> m_target;
        #endregion
    }
    public enum AuthenticationLevels
    {
        Default = 0x0,
        None = 0x1,
        Connect = 0x2,
        Call = 0x3,
        Packet = 0x4,
        PacketIntegrity = 0x5,
        PacketPrivacy = 0x6,
    }
    public enum AuthenticationServices
    {
        Negotiate = 0x9,
        NTLM = 0xa,
        SChannel = 0xe,
        Kerberos = 0x10,
        Kernel = 0x14,
    }
    public enum EventTypes
    {
        LOCK_UNLOCK = 0x21,
        DELAY = 0x23,
        LOCK_WRITER = 0x26,
        DROP = 0x2a,
        INC = 0x2b,
        CLEANUP = 0x2c,
        DEC = 0x2d,
        STATE = 0x3d,
        APC = 0x41,
        BUFFER_OUT = 0x42,
        CREATE = 0x43,
        DELETE = 0x44,
        RESUME = 0x45,
        SEC_SIGN_OR_SEAL = 0x47,
        SEC_INIT3 = 0x49,
        SEC_ACCEPT3 = 0x4a,
        PKT_OUT = 0x4b,
        CALLBACK = 0x4c,
        NOTIFY = 0x4e,
        BHCOPY = 0x4f,
        POP = 0x50,
        PUSH = 0x51,
        ABORT = 0x52,
        STATUS = 0x53,
        TRANSFER = 0x54,
        PCONTEXT_ALLOC = 0x55,
        SEC_VERIFY_OR_UNSEAL = 0x56,
        TP_WAIT = 0x57,
        BUFFER_FAIL = 0x58,
        ACK = 0x61,
        BUFFER_IN = 0x62,
        START = 0x63,
        STOP = 0x64,
        SUSPEND = 0x65,
        SEC_INIT1 = 0x69,
        SEC_ACCEPT1 = 0x6a,
        PKT_IN = 0x6b,
        REMOVED = 0x6d,
        OPER = 0x6f,
        PRUNE = 0x70,
        QUERY = 0x71,
        RESOLVED = 0x72,
        SET = 0x73,
        ALLOCATE = 0x74,
        PCONTEXT_DELETE = 0x75,
        TP_CONVERT = 0x76,
        WINDOW = 0x77,
        DISASSOC = 0x78,
        LOCK_READER = 0x7c,
        CALL_STATE = 0x7e,
        PROC = 0x7f,
    }
    public enum ImpersonationLevels
    {
        Default = 0x0,
        Anonymous = 0x1,
        Identify = 0x2,
        Impersonate = 0x3,
        Delegate = 0x4,
    }
    public enum ProtocolSequences
    {
        TCP = 0x1,
        NamedPipes = 0x2,
        LRPC = 0x3,
        RPCHTTP = 0x4,
    }
    public enum RpcHttp2ObjectTypes
    {
        SOCKET_CHANNEL = 0x1,
        PROXY_SOCKET_CHANNEL = 0x2,
        CHANNEL = 0x3,
        BOTTOM_CHANNEL = 0x4,
        IIS_CHANNEL = 0x5,
        RAW_CONNECTION = 0x6,
        INITIAL_RAW_CONNECTION = 0x7,
        IIS_SENDER_CHANNEL = 0x8,
        ENDPOINT_RECEIVER = 0x9,
        PLUG_CHANNEL = 0xa,
        CLIENT_VC = 0xb,
        SERVER_VC = 0xc,
        INPROXY_VC = 0xd,
        OUTPROXY_VC = 0xe,
        PROXY_VC = 0xf,
        CDATA_ORIGINATOR = 0x10,
        CLIENT_CHANNEL = 0x11,
        CALLBACK = 0x12,
        FLOW_CONTROL_SENDER = 0x13,
        WINHTTP_CALLBACK = 0x14,
        WINHTTP_CHANNEL = 0x15,
        WINHTTP_RAW = 0x16,
        PROXY_RECEIVER = 0x17,
        SERVER_CHANNEL = 0x18,
        FRAGMENT_RECEIVER = 0x19,
    }
    public enum RpcHttp2Operations
    {
        SEND = 0x1,
        RECV = 0x2,
        COMPLETE_HELPER = 0x3,
        RECV_COMPLETE = 0x4,
        SEND_COMPLETE = 0x5,
        FREE_OBJECT = 0x6,
        ABORT = 0x7,
        IIS_IO_COMPLETED = 0x8,
        CHANNEL_RECYCLE = 0x9,
        DIRECT_SEND_COMPLETE = 0xa,
        SYNC_RECV = 0xb,
        COMPLEX_T_SEND = 0xc,
        COMPLEX_T_RECV = 0xd,
        DIRECT_RECV_COMPLETE = 0xe,
        WINHTTP_CALLBACK = 0xf,
        WHTTP_DRECV_COMPLETE = 0x10,
        WHTTP_DSEND_COMPLETE = 0x11,
        WHTTP_DELAYED_RECV = 0x12,
        WHTTP_ERROR = 0x13,
        OPEN = 0x14,
        CHECK_RECV_COMPLETE = 0x15,
        CLOSE = 0x16,
        SEND_CANCELLED = 0x17,
        UNPLUG = 0x18,
        WinHttpOpen = 0x80,
        WinHttpSetStatusCallback = 0x81,
        WinHttpSetOption = 0x82,
        WinHttpConnect = 0x83,
        WinHttpOpenRequest = 0x84,
        WinHttpQueryOption = 0x85,
        WinHttpSendRequest = 0x86,
        WinHttpWriteData = 0x87,
        WinHttpReceiveResponse = 0x88,
        WinHttpReadData = 0x89,
        WinHttpCloseHandle = 0x8a,
        WinHttpQueryHeaders = 0x8b,
        WinHttpQueryDataAvailable = 0x8c,
        WinHttpQueryAuthSchemes = 0x8d,
        WinHttpSetCredentials = 0x8e,
        WinHttpAddRequestHeaders = 0x8f,
        WinHttpGetIEProxyConfigForCurrentUser = 0x90,
        WinHttpGetProxyForUrl = 0x91,
        WinHttpAutoLogon = 0x92,
    }
    public enum SubjectTypes
    {
        ASSOC = 0x2e,
        HTTPv2 = 0x32,
        SASSOC = 0x41,
        BCACHE2 = 0x42,
        SCALL = 0x43,
        ADDRESS = 0x44,
        ENGINE = 0x45,
        CAUSAL_F = 0x46,
        GC = 0x47,
        HEAP = 0x48,
        EEINFO = 0x49,
        ALPC = 0x4c,
        RESERVED_MEM = 0x4d,
        SCONN = 0x4e,
        CORRUPT = 0x4f,
        PROVIDER = 0x50,
        SECCRED = 0x53,
        STABLE = 0x54,
        PROTOCOL = 0x57,
        CASSOC = 0x61,
        BCACHE = 0x62,
        CCALL = 0x63,
        TP_ALPC = 0x64,
        CENDPOINT = 0x65,
        TP_CALLBACK = 0x66,
        HANDLE = 0x68,
        IF = 0x69,
        TP_IO = 0x6a,
        TP_WORK = 0x6b,
        CTXHANDLE = 0x6c,
        MUTEX = 0x6d,
        CCONN = 0x6e,
        TRANS_CONN = 0x6f,
        PACKET = 0x70,
        REFOBJ = 0x72,
        SSECCTX = 0x73,
        THREAD = 0x74,
        TP_TIMER = 0x75,
        EVENT = 0x76,
        TP_WAIT = 0x77,
        EXCEPT = 0x78,
    }
}
